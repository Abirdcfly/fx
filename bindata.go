// Code generated by go-bindata.
// sources:
// images/go/Dockerfile
// images/go/app.go
// images/go/fx.go
// images/java/Dockerfile
// images/java/pom.xml
// images/java/src/main/java/fx/Fx.java
// images/java/src/main/java/fx/app.java
// images/julia/Dockerfile
// images/julia/REQUIRE
// images/julia/app.jl
// images/julia/deps.jl
// images/julia/fx.jl
// images/node/Dockerfile
// images/node/app.js
// images/node/fx.js
// images/php/Dockerfile
// images/php/fx.php
// images/php/index.php
// images/python/Dockerfile
// images/python/app.py
// images/python/fx.py
// images/ruby/Dockerfile
// images/ruby/app.rb
// images/ruby/fx.rb
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _imagesGoDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x48\xcf\xcf\x49\xcc\x4b\xb7\xca\x49\x2c\x49\x2d\x2e\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\x72\x8d\x08\xf0\x0f\x76\x55\x30\x36\x30\x30\xe0\x72\xf6\x75\x51\x88\x56\x4a\xcf\x57\xd2\x51\x50\x2a\x2a\xcd\x03\x51\x89\x05\x05\x7a\x10\x81\xb4\x0a\x10\x23\x96\x0b\x10\x00\x00\xff\xff\x54\x52\xc4\x66\x4e\x00\x00\x00")

func imagesGoDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesGoDockerfile,
		"images/go/Dockerfile",
	)
}

func imagesGoDockerfile() (*asset, error) {
	bytes, err := imagesGoDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/go/Dockerfile", size: 78, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesGoAppGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\x3d\x4f\xf3\x30\x10\xc7\x67\xdf\xa7\xb8\xc7\xc3\x23\x1b\x55\x69\x25\xb6\x4a\x19\x40\x50\x81\x84\x18\x60\x60\x8e\xe2\x6b\x6b\x68\xcf\xee\xd9\x29\x20\xd4\xef\x8e\xec\xa4\x48\x6c\x2c\x19\xf2\x7f\x3b\xff\x62\xd7\xbf\x75\x1b\xc2\x7d\xe7\x19\xc0\xef\x63\x90\x8c\x06\x94\x26\xee\x83\xf3\xbc\x99\xbf\xa6\xc0\x1a\x94\x66\xca\xf3\x6d\xce\x51\x83\x05\x58\x0f\xdc\xe3\xb6\x63\xb7\x23\x31\x42\x09\x8b\xd2\x3c\x51\x8a\x81\x13\xbd\x88\xcf\x24\x33\x14\x3a\xe0\xc5\xa4\x1c\x06\x4a\xd9\xe2\x17\x28\x47\x7d\x70\x24\xb8\x6c\xb1\x74\x37\x8f\xf4\x7e\x33\xfe\x32\x42\x87\xe6\x3a\xb8\x4f\x0b\xa0\x8e\x9d\xa0\xe7\x38\x64\xbc\x2f\x5f\x50\x24\x35\x33\xc5\x9b\x31\x63\xfe\x57\x8f\x05\xe5\xd7\x58\x1c\xff\x5a\x64\xbf\x2b\x3b\x2a\x76\xec\x7b\x43\x22\x16\xd4\x09\x40\x85\x21\x97\xba\x65\x8b\xab\x8f\x9f\x1c\xa8\xfa\xd2\xdf\xf7\xdc\xf2\xf9\x9e\x64\xc7\xe1\x16\x27\x5b\x33\x6a\x66\x2c\xfb\xc3\xee\x69\xa2\x55\x08\x9b\x0a\xa0\x12\xb9\xab\xf0\x56\x03\xf7\x46\xcf\xf5\xec\x0c\xd3\x4e\xf2\x83\x4f\x99\xf8\x8a\xdd\x33\xc9\x91\x8c\x5e\x5e\x2e\x16\x0b\x3d\x2b\x1b\x16\x4e\xf0\x1d\x00\x00\xff\xff\x05\xaa\xa0\xe3\xb7\x01\x00\x00")

func imagesGoAppGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesGoAppGo,
		"images/go/app.go",
	)
}

func imagesGoAppGo() (*asset, error) {
	bytes, err := imagesGoAppGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/go/app.go", size: 439, mode: os.FileMode(420), modTime: time.Unix(1511608405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesGoFxGo = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2a\x48\x4c\xce\x4e\x4c\x4f\x55\xc8\x4d\xcc\xcc\xe3\xe2\x2a\xa9\x2c\x48\x55\xf0\xcc\x2b\x28\x2d\x51\x28\x2e\x29\x2a\x4d\x2e\x51\xa8\xe6\xe2\x74\x54\xc8\xcc\x2b\x31\x36\xe2\xe2\x74\x82\x32\x6a\xa1\x0a\xfd\x4b\x4b\x50\x55\x06\x97\xe6\x22\x94\xa4\x95\xe6\x25\x2b\xb8\x55\x68\x64\x82\x8d\xd3\x02\x9b\xaa\xa9\xa0\x91\x0f\xd1\xa4\x05\xd1\xac\x09\xd2\x06\x15\xb2\x55\x50\x83\x08\x56\x73\x71\x82\x8c\xb2\x52\x00\x6b\xd5\x73\x54\xd0\x86\xb2\x9c\x74\xb8\x38\x6b\xb9\x38\x8b\x52\x4b\x4a\x8b\xf2\xb8\x6a\xb9\x00\x01\x00\x00\xff\xff\x66\x36\xf8\x64\xbd\x00\x00\x00")

func imagesGoFxGoBytes() ([]byte, error) {
	return bindataRead(
		_imagesGoFxGo,
		"images/go/fx.go",
	)
}

func imagesGoFxGo() (*asset, error) {
	bytes, err := imagesGoFxGoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/go/fx.go", size: 189, mode: os.FileMode(420), modTime: time.Unix(1511608405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJavaDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xce\xcf\x4a\x03\x31\x10\xc7\xf1\x7b\x9e\x62\x88\xd7\x66\x13\x51\xc4\x6b\x71\xeb\xad\x56\x2a\x82\x50\x7a\x98\x4d\xa6\x4b\xd2\xe6\x0f\x93\xec\xe2\xe3\xcb\xae\x3d\xcd\xe1\xcb\xfc\xf8\xbc\x1f\x0f\x7b\x88\xd4\x78\x22\x7d\xf9\x55\x01\x67\x54\x03\x56\x12\xe2\x01\xb6\xce\xf9\x34\x42\xcd\x13\x5b\xda\x80\xcd\xb1\xf8\x1b\x01\x26\x07\x05\xed\x15\x47\x02\x9f\x5a\x06\x84\x0b\x36\x08\xc8\x62\xdb\xf7\x50\xd9\x82\xb6\xd9\x91\xae\x6c\xc5\xf1\xfb\x03\x4e\x32\xce\x49\x6e\x40\xde\xbf\xe4\x59\x88\xdd\xcf\xe7\xe1\x6b\x07\x4f\xc6\x18\xf1\xb6\xef\xe1\x24\xf5\x54\x59\xdf\xfc\xa0\xc3\x1c\xf5\xea\x78\x55\xb9\x50\x0a\xee\xaa\x30\xba\x97\x67\x3d\xf8\xb4\x86\x65\x4a\x05\xe4\xe5\x36\xe4\x91\xda\x42\xc7\x52\xfe\xf9\xa6\x7b\xec\x4c\xb7\xf4\xb3\xf8\x0b\x00\x00\xff\xff\x3e\xec\xd9\xbe\xdf\x00\x00\x00")

func imagesJavaDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesJavaDockerfile,
		"images/java/Dockerfile",
	)
}

func imagesJavaDockerfile() (*asset, error) {
	bytes, err := imagesJavaDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/java/Dockerfile", size: 223, mode: os.FileMode(420), modTime: time.Unix(1512102056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJavaPomXml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x55\x51\x6f\xdb\x20\x10\x7e\xcf\xaf\xb0\xfc\x1e\xb0\xbb\x4a\xab\x2a\x4a\x1f\x26\x4d\xaa\xd4\x6a\xd3\xd6\x4d\x7b\xab\x6e\xf8\xec\x90\xda\x80\x80\x24\xde\xbf\x9f\x0c\x4e\x63\xc7\x75\xdc\x3c\x85\xfb\x3e\xee\xbe\xef\x80\x33\xbb\x6f\x9b\x3a\xd9\xa3\x75\x52\xab\xbb\x34\x27\x59\x9a\xa0\x12\xba\x90\xaa\xba\x4b\x7f\x3d\x7f\x5d\xdf\xa4\xf7\x7c\xc5\x8c\xd5\x5b\x14\x3e\x69\x9b\x5a\xb9\xbb\x74\xe3\xbd\xb9\xa5\xb4\x81\x3d\x2a\x02\x06\xc4\x06\x89\xb6\x15\xfd\xfe\xed\x89\x5e\x93\xac\xcb\x12\x98\xb7\xad\x93\x6f\xec\xc3\xe1\x40\x0e\x9f\x02\xef\x2a\xcb\x72\xfa\xe7\xe9\xf1\xa7\xd8\x60\x03\x6b\xa9\x9c\x07\x25\x30\x5d\x25\x49\x92\xb4\x4e\xde\xba\x00\x3c\x6a\x01\x3e\x08\x5b\x2c\x98\xcc\x31\x42\x60\xbd\xbf\x7e\xc9\x5e\x32\xd2\xba\x22\xe5\xa1\x08\x6b\x74\x81\xf5\xef\x68\x9c\x87\x14\x8c\x8e\x62\x91\x56\x59\xbd\x33\x0f\x05\xd7\xb6\x22\xce\x58\xa9\xaa\xd2\x42\x83\x07\x6d\x5f\x19\x3d\x82\x91\x0a\xd6\xcb\x12\x84\x7f\x28\x78\xd9\xae\xc1\x98\xf5\x16\xf6\xc0\xe8\x20\x1e\x89\x06\xc4\x2b\x54\x52\x55\x7c\x0b\x96\xd1\xd3\x32\xc2\xfd\x69\xf0\x8c\xe4\x9d\xa8\xe3\x72\x15\xd1\xbf\x3b\x59\xf7\x89\x62\xb2\x7a\x57\x49\xe5\x4e\x91\x41\x74\x1c\x9c\xf8\xe9\xbb\x14\x5b\xd6\xe7\x39\x33\x35\xda\x3b\x30\x12\xbb\xea\x36\x50\xe0\x3a\xee\x9c\xfa\x1c\xed\x3d\xba\xb8\x22\xf9\xc0\xd2\x84\x86\x2d\x8a\x5d\x77\xe4\x6e\x0a\x8e\x09\xef\xe3\xd1\xfc\x06\x1c\xf2\xd8\x56\x64\x34\x2e\xe7\xe9\x95\x86\x7a\xa6\xdc\x88\xc3\x83\x5d\x46\xc3\xff\xf9\x74\x74\x21\x1f\x13\x5a\x95\xb2\xda\x59\xb8\x6c\x23\x70\xbd\x05\xe5\x4a\x6d\x1b\xb4\x0b\x12\xcf\xe9\x8b\xe4\xee\x27\x1b\x53\x63\x83\xca\xf7\xcf\x6c\xee\x56\x90\x60\x9d\x58\x74\x7a\x67\x05\x92\x27\x50\xb2\x44\xe7\x7f\xf4\x81\xe7\x53\xdd\x74\x59\x66\x90\xda\x80\x54\x5f\x6a\x70\x8e\x97\x2d\x01\x63\x18\x3d\x45\x96\x8d\xd2\x81\xd3\x85\x16\xd2\x8f\xf5\x90\xd1\x0f\x9c\x0b\xa3\x17\xee\xdf\x00\x3c\x7f\x8e\xf4\xfc\x3d\x1e\x23\x3d\x91\xd1\xc1\xb3\xee\x86\xad\x41\xeb\x25\x0e\xd2\xb0\x78\x1e\x42\x37\x46\xd6\x68\x49\xec\x3b\xbf\x61\xf4\x7d\x60\x76\xa3\x07\x5b\xa1\x7f\x67\x63\x0f\xac\x82\xb8\x91\x02\x56\xa0\x41\x55\xa0\x12\x93\xc0\xbf\xb3\x31\x29\x35\xe9\x86\x5e\xdd\xcd\x83\xd9\xe9\xf8\xc6\x98\x4c\xc6\xe3\x60\xc8\x49\x7e\x36\x27\x18\x1d\xd7\x9c\x97\xd0\xdd\xe1\xad\xd3\x17\x05\x04\x78\xb6\xfa\x55\x96\x7f\xce\xb3\xfc\xe6\xb2\x00\x3a\xee\x4a\x68\x5a\xf7\x8d\xe4\xab\xff\x01\x00\x00\xff\xff\x29\x98\x10\x03\x55\x07\x00\x00")

func imagesJavaPomXmlBytes() ([]byte, error) {
	return bindataRead(
		_imagesJavaPomXml,
		"images/java/pom.xml",
	)
}

func imagesJavaPomXml() (*asset, error) {
	bytes, err := imagesJavaPomXmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/java/pom.xml", size: 1877, mode: os.FileMode(420), modTime: time.Unix(1512007018, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJavaSrcMainJavaFxFxJava = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x74\xcb\xc1\xaa\xc2\x30\x10\x05\xd0\x7d\xbe\x62\xe8\x2a\xe1\x41\x7e\xa0\xbc\xed\x83\xbe\x85\x5d\xf4\x0b\x26\x71\x8c\xa9\x75\x12\x92\x29\x14\xa4\xff\x2e\xd2\x82\xa8\x78\x97\xf7\x9e\x9b\xd1\x5f\x30\x10\x9c\x96\x56\xa9\x78\xcd\xa9\x08\xa4\x12\xec\x58\x13\xdb\xff\xa1\x3f\xf4\x6e\x24\x2f\xad\x52\x79\x76\x53\xf4\xe0\x27\xac\x15\xfe\x16\xb8\x29\x00\x80\xbd\x8d\x2c\x70\x46\x3e\x4e\xa4\x9f\x27\x88\x9c\x67\x31\xbb\x7c\x64\x90\x12\x39\x00\xc2\xef\xb6\xd9\x40\xa2\x1b\x6c\x8c\x95\xb4\x6d\xda\xb4\xef\xda\xbd\x6a\xf7\x45\x17\x92\xb9\x30\x74\x2c\x14\xa8\xd8\x8c\xa5\x52\xc7\xa2\xd1\xc0\xcf\x67\xeb\xf6\xe7\xaa\x56\x75\x0f\x00\x00\xff\xff\xeb\x12\x79\x86\x04\x01\x00\x00")

func imagesJavaSrcMainJavaFxFxJavaBytes() ([]byte, error) {
	return bindataRead(
		_imagesJavaSrcMainJavaFxFxJava,
		"images/java/src/main/java/fx/Fx.java",
	)
}

func imagesJavaSrcMainJavaFxFxJava() (*asset, error) {
	bytes, err := imagesJavaSrcMainJavaFxFxJavaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/java/src/main/java/fx/Fx.java", size: 260, mode: os.FileMode(420), modTime: time.Unix(1512007018, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJavaSrcMainJavaFxAppJava = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x4f\xb1\x6e\xc3\x20\x14\xdc\xf9\x8a\x27\x4f\x58\x6d\xa9\xa5\x8e\x56\x3a\x66\xc8\xd0\x0c\x19\xab\x0e\x0f\x4c\x5d\x28\x01\x04\x2f\x29\x55\xe5\x7f\xaf\x9c\x10\xc7\xb7\x1c\xdc\x9d\xee\x20\xa2\xfa\xc6\x51\xc3\x67\xe9\x19\x33\xc7\x18\x12\x81\x09\xc2\xe2\x19\x9d\xf1\x62\x77\xe5\xfe\x66\x85\x34\x0a\x9b\x83\x17\xbb\xc3\xfe\x6d\x2f\xad\x56\xd4\x33\x16\x4f\xd2\x19\x05\xca\x61\xce\x80\x31\xc2\x1f\x03\x00\xa8\x72\x26\x24\xa3\xe0\x1c\xcc\x00\x47\x34\x9e\x1f\x28\x19\x3f\xbe\x7f\x00\xa6\x31\xb7\x35\x3c\xa3\xae\x5d\x2a\x36\xb7\x9b\xc8\x84\x89\xf8\x4b\xd7\x75\x6d\xbf\x44\xb7\x05\xbe\xd0\x0f\x4e\x27\xd8\x80\xd7\x3f\xb0\x2d\x7c\x65\x63\x8c\x22\x86\x4c\xbc\x79\x6e\x1e\x41\x51\x81\xa7\xd7\xd5\xd0\x65\x6c\xf9\x01\x04\x69\x6b\xcb\x5d\xe4\x8a\x8a\x90\x61\xf8\xe5\xed\xaa\x77\xc6\x6c\x24\x9d\x4f\x8e\x78\xd3\x3c\xd4\x57\x88\x2b\xf3\x20\xed\x3a\x3f\xd5\xf3\xc4\x26\xf6\x1f\x00\x00\xff\xff\x88\x06\x7e\x0e\x6b\x01\x00\x00")

func imagesJavaSrcMainJavaFxAppJavaBytes() ([]byte, error) {
	return bindataRead(
		_imagesJavaSrcMainJavaFxAppJava,
		"images/java/src/main/java/fx/app.java",
	)
}

func imagesJavaSrcMainJavaFxAppJava() (*asset, error) {
	bytes, err := imagesJavaSrcMainJavaFxAppJavaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/java/src/main/java/fx/app.java", size: 363, mode: os.FileMode(420), modTime: time.Unix(1512007916, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJuliaDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\xcd\xb1\x0e\x82\x40\x0c\x80\xe1\xbd\x4f\xd1\x89\xed\x80\xc4\xcd\x15\x71\x43\x08\xc6\x44\xc7\x0a\x0d\x1e\x56\xd2\x70\x3d\x13\x7d\x7a\xe3\x0d\xc6\xf5\x1b\xfe\x7f\xdf\xb7\x0d\xce\x51\x3c\x6d\x85\x8c\x83\x01\x54\x6d\x77\xc1\x1c\x0b\x52\x05\xe8\x4f\x07\x24\x35\x37\xb1\x61\xd4\x91\x8c\x31\xcb\x7e\xe2\x97\x60\x24\x82\xee\x85\xd3\x30\x24\x8e\xe6\x25\x60\x5c\xde\x5e\xf1\x41\x77\x46\xf1\xd7\x9b\x99\x3a\xa5\x35\xf0\xea\x46\x7e\xa6\x68\x7a\xa6\x49\x31\xb2\x86\x7c\x16\x80\xaa\xd9\xfd\x3b\xa9\x7e\xb9\x3e\x77\xed\xb1\xc6\x4d\x59\x96\x9f\x00\x00\x00\xff\xff\x56\xfd\xf7\xa2\xae\x00\x00\x00")

func imagesJuliaDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesJuliaDockerfile,
		"images/julia/Dockerfile",
	)
}

func imagesJuliaDockerfile() (*asset, error) {
	bytes, err := imagesJuliaDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/julia/Dockerfile", size: 174, mode: os.FileMode(420), modTime: time.Unix(1511608405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJuliaRequire = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xf2\x28\x29\x29\x08\x48\x2c\x2a\x4e\x2d\xe2\x02\x31\x83\x53\x8b\xca\x52\x8b\xb8\xbc\x82\xfd\xfd\xb8\x42\xf3\x72\x13\x8b\x8a\x33\x12\x73\x00\x01\x00\x00\xff\xff\xd7\xa8\xf0\xa3\x24\x00\x00\x00")

func imagesJuliaRequireBytes() ([]byte, error) {
	return bindataRead(
		_imagesJuliaRequire,
		"images/julia/REQUIRE",
	)
}

func imagesJuliaRequire() (*asset, error) {
	bytes, err := imagesJuliaRequireBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/julia/REQUIRE", size: 36, mode: os.FileMode(420), modTime: time.Unix(1511608405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJuliaAppJl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4c\x8f\xc1\x6a\xc3\x30\x0c\x86\xef\x7e\x8a\x9f\x9e\x6c\x28\x26\xb0\x9d\x0a\x39\xed\xb2\xed\xb0\x8d\x95\x9d\xc6\x18\x66\x51\x5a\x97\x54\x49\x24\x3b\xf4\xf1\x87\x93\xa6\x9b\xc0\x20\xeb\xe3\xd3\x6f\x67\x8d\x7c\xc0\x63\x4a\xc3\x9e\x64\x22\x31\xf1\x3c\xf4\x92\xf0\xbc\x7f\x7d\x59\xfb\x0f\x3e\x07\xd1\x63\xe8\x8c\x89\xfc\xd3\xe5\x86\xec\xa6\xbd\xf8\x53\xb7\x71\xc6\xa8\x4c\xa8\xb1\xc8\xd6\xa1\xe9\x21\x34\xee\x76\xef\x34\x66\xd2\xb4\x85\x90\x96\x9b\x0e\x3d\x2b\x19\x00\x88\x2d\x3a\xe2\x43\x3a\x5a\xa1\xd1\x37\x21\x05\x87\xba\x46\x35\xc3\x52\x42\xea\x35\x85\x94\x15\x35\xee\xab\x05\x50\x77\xd5\x4b\x0d\x41\x94\x9a\xef\xe2\xa2\x9e\xdf\xea\xdf\xca\x48\xfc\x4c\xec\xa9\x8f\x6c\x3f\x1f\x8e\x41\xec\xe4\xd0\xf6\x82\x09\x91\xb1\xe6\x7d\x39\x77\x5b\x75\xdd\x71\xfb\xa3\xcf\x6b\x67\x9f\x78\xc8\x69\xfb\x3f\xec\x4f\xd3\x24\x91\x0f\xb6\xbd\xd8\x79\xbe\x00\xe2\xc6\x94\x63\x24\xb3\x55\x99\xb6\xb8\xab\xaa\xca\x99\xdf\x00\x00\x00\xff\xff\xa9\xee\x46\x33\x65\x01\x00\x00")

func imagesJuliaAppJlBytes() ([]byte, error) {
	return bindataRead(
		_imagesJuliaAppJl,
		"images/julia/app.jl",
	)
}

func imagesJuliaAppJl() (*asset, error) {
	bytes, err := imagesJuliaAppJlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/julia/app.jl", size: 357, mode: os.FileMode(420), modTime: time.Unix(1511608405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJuliaDepsJl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x14\xc9\x31\x0a\xc3\x30\x0c\x46\xe1\x59\x3a\x85\xf0\x64\x2f\xcd\x09\x3a\x06\xda\x2d\x0d\xf4\x00\x2e\xbf\x5c\x4c\x83\x2d\xe4\xf4\xfe\xc1\xc3\x5b\xde\xd7\x4d\x5b\x0c\x4b\x36\x5b\xf6\xf5\xf5\x7e\xee\x6b\x48\x82\x2e\x85\x09\x6a\x43\xee\xe2\x9a\x71\xd4\xa6\x23\x96\xc4\x54\xba\x0b\xa4\x36\x99\xca\x44\xdb\xef\x7b\xcb\x40\x44\x62\xd2\x06\x9e\xcd\xf7\xf9\xd7\x03\x31\x3c\xce\xd3\xb6\xec\x43\x3d\x24\xbe\x02\x00\x00\xff\xff\x9a\xfc\x26\x05\x6c\x00\x00\x00")

func imagesJuliaDepsJlBytes() ([]byte, error) {
	return bindataRead(
		_imagesJuliaDepsJl,
		"images/julia/deps.jl",
	)
}

func imagesJuliaDepsJl() (*asset, error) {
	bytes, err := imagesJuliaDepsJlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/julia/deps.jl", size: 108, mode: os.FileMode(420), modTime: time.Unix(1511608405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesJuliaFxJl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe2\x2a\x2e\x29\x2a\x4d\x2e\x51\xf0\xcc\x2b\x28\x2d\xe1\x52\x50\x50\x50\x48\xb4\xb2\xf2\x2b\xcd\x4d\x4a\x2d\x02\xf3\x92\xe0\xbc\xd4\xbc\x14\x2e\xae\xb4\x0a\x05\x5b\x85\xb4\xd2\xbc\xe4\x92\xcc\xfc\x3c\x8d\x4c\x90\x26\x2b\x2b\xb0\x5e\x4d\xb0\xf2\xa2\xd4\x92\xd2\xa2\x3c\x05\xb0\x84\x5e\xa2\x82\x36\x94\x95\x04\xd6\x0d\x08\x00\x00\xff\xff\x4e\xfe\x85\x5b\x6c\x00\x00\x00")

func imagesJuliaFxJlBytes() ([]byte, error) {
	return bindataRead(
		_imagesJuliaFxJl,
		"images/julia/fx.jl",
	)
}

func imagesJuliaFxJl() (*asset, error) {
	bytes, err := imagesJuliaFxJlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/julia/fx.jl", size: 108, mode: os.FileMode(420), modTime: time.Unix(1511608405, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\xc8\x4d\x2d\x29\x2a\x4d\xd5\x4f\xab\xd0\xcd\xcb\x4f\x49\xd5\x4d\x4a\x2c\x4e\xe5\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\x72\x8d\x08\xf0\x0f\x76\x55\x30\x36\x30\x30\xe0\x72\xf6\x75\x51\x88\x56\x02\xa9\x52\xd2\x51\x50\x4a\x2c\x28\xd0\xcb\x2a\x56\x8a\xe5\x02\x04\x00\x00\xff\xff\x6c\x95\x39\x18\x46\x00\x00\x00")

func imagesNodeDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeDockerfile,
		"images/node/Dockerfile",
	)
}

func imagesNodeDockerfile() (*asset, error) {
	bytes, err := imagesNodeDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/Dockerfile", size: 70, mode: os.FileMode(420), modTime: time.Unix(1512102056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeAppJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\x8d\x41\x0e\xc2\x20\x10\x45\xf7\x9c\xe2\xef\x0a\x0b\xb1\x89\x4b\x82\x17\x70\xe3\x15\xb0\x4e\x4d\xa3\x02\x02\x8d\x35\xc6\xbb\x9b\x29\x26\x6d\x5c\xce\xbc\x97\xff\xba\xe0\x73\xc1\x21\x38\x58\x24\x7a\x8c\x43\x22\xd9\x5c\x83\x6b\x94\x11\x95\x9d\xc2\xf9\x75\x74\x29\x53\xfa\x53\x36\x4c\xe2\x4c\x16\xbb\x1f\x7d\xb7\xf6\xf4\xb6\x9f\x98\xfe\xb0\x8b\x11\x16\x9e\x9e\x9c\x94\xca\x08\x17\xa3\x1e\x33\xc9\xa5\x22\xd5\xea\xdd\x95\x09\x76\x8f\xb7\x00\x80\x3a\x71\xcf\x17\xd8\xb9\xc3\x54\x73\x89\x72\xd1\x3c\xa0\x4c\xf5\xca\x34\x9f\xb0\x2c\x1b\xf1\xe1\x3e\x2f\xde\x86\x5c\xc8\xcb\x5d\xdb\xb6\xca\x88\x6f\x00\x00\x00\xff\xff\xd7\x6a\x7f\xde\xfb\x00\x00\x00")

func imagesNodeAppJsBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeAppJs,
		"images/node/app.js",
	)
}

func imagesNodeAppJs() (*asset, error) {
	bytes, err := imagesNodeAppJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/app.js", size: 251, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesNodeFxJs = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xca\xcd\x4f\x29\xcd\x49\xd5\x4b\xad\x28\xc8\x2f\x2a\x29\x56\xb0\x55\xd0\xc8\xcc\x2b\x28\x2d\xd1\x54\xb0\xb5\x53\xa8\xe6\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\x00\x0b\xeb\x25\x2a\x68\x43\x59\x49\x5c\xb5\x5c\x80\x00\x00\x00\xff\xff\x0e\xf0\xca\xf3\x3d\x00\x00\x00")

func imagesNodeFxJsBytes() ([]byte, error) {
	return bindataRead(
		_imagesNodeFxJs,
		"images/node/fx.js",
	)
}

func imagesNodeFxJs() (*asset, error) {
	bytes, err := imagesNodeFxJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/node/fx.js", size: 61, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPhpDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x28\xc8\x28\xb0\xca\x49\x2c\x49\x2d\x2e\xe1\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\x72\x8d\x08\xf0\x0f\x76\x55\x30\x36\x30\x30\xe0\x72\xf6\x75\x01\x29\x52\xd0\x0d\x56\x30\xd0\x03\x43\x2b\xb0\x38\x20\x00\x00\xff\xff\x28\x58\xc4\x1f\x3e\x00\x00\x00")

func imagesPhpDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesPhpDockerfile,
		"images/php/Dockerfile",
	)
}

func imagesPhpDockerfile() (*asset, error) {
	bytes, err := imagesPhpDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/php/Dockerfile", size: 62, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPhpFxPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb2\xb1\x2f\xc8\x28\xe0\x52\x50\x50\x50\x48\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x70\xab\xd0\x50\xc9\xcc\x2b\x28\x2d\xd1\x54\xa8\x06\xcb\x80\x40\x51\x6a\x49\x69\x51\x9e\x02\x44\x22\x5a\x29\x51\x29\x56\x1b\xc6\x4e\x52\x8a\xb5\x06\xab\xab\xe5\x02\x04\x00\x00\xff\xff\xb6\xe1\x79\xfc\x4e\x00\x00\x00")

func imagesPhpFxPhpBytes() ([]byte, error) {
	return bindataRead(
		_imagesPhpFxPhp,
		"images/php/fx.php",
	)
}

func imagesPhpFxPhp() (*asset, error) {
	bytes, err := imagesPhpFxPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/php/fx.php", size: 78, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPhpIndexPhp = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\xcc\x41\x0a\xc2\x30\x10\x46\xe1\x7d\x4f\xf1\x13\xba\x88\x20\x76\x6f\x0d\xee\xbc\x46\x28\xc9\xd4\x44\xca\x64\x68\x26\xa5\xc7\x17\x8b\xba\x7d\x7c\xbc\xdb\x5d\x92\x74\x00\x90\x39\x2c\x2d\x92\x35\xf3\x7e\x91\x24\xe6\x34\x1e\xb9\x8f\x93\x4e\x70\x98\xf3\x42\xfe\x49\xea\x43\x61\x25\xd6\x6a\x8d\x24\xb9\x0e\x43\x66\x69\xfa\xd7\x2b\x55\x38\xbc\x6a\x61\x1f\x29\x94\x48\xf6\x18\x9c\x75\x6d\xf4\x33\x1b\x1c\x1e\xbb\xfd\xd8\x6f\xa2\x90\x0a\xfa\x6d\xec\xde\x01\x00\x00\xff\xff\x78\x1c\x8b\x41\x8f\x00\x00\x00")

func imagesPhpIndexPhpBytes() ([]byte, error) {
	return bindataRead(
		_imagesPhpIndexPhp,
		"images/php/index.php",
	)
}

func imagesPhpIndexPhp() (*asset, error) {
	bytes, err := imagesPhpIndexPhpBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/php/index.php", size: 143, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPythonDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\xc8\x4d\x2d\x29\x2a\x4d\xd5\x4f\xab\xd0\x2d\xa8\x2c\xc9\xc8\xcf\xd3\x4d\x4a\x2c\x4e\xe5\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\x72\x8d\x08\xf0\x0f\x76\x55\x30\x36\x30\x30\xe0\x72\xf6\x75\x51\x48\xcb\x49\x2c\xce\x56\x28\x2a\xcd\x53\xd0\xcd\x50\x30\xd0\x03\x43\x05\xdd\x02\x88\x02\x40\x00\x00\x00\xff\xff\x21\xaa\x3b\x6b\x52\x00\x00\x00")

func imagesPythonDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesPythonDockerfile,
		"images/python/Dockerfile",
	)
}

func imagesPythonDockerfile() (*asset, error) {
	bytes, err := imagesPythonDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/python/Dockerfile", size: 82, mode: os.FileMode(420), modTime: time.Unix(1512102056, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPythonAppPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x3c\x8e\xb1\x8a\xc3\x30\x0c\x40\x77\x7f\x85\x36\xdb\x10\x72\xfb\x81\xe1\xa6\x5b\xef\xa0\xd9\x4a\x31\xa6\x91\xdb\xa4\x75\xe4\xca\x32\xa4\x7f\x5f\xd2\x24\x1d\xf5\xf4\xf4\x50\x64\x4a\x10\x67\x18\x52\x26\x16\x88\xb3\x5a\xc9\x3d\x94\xdb\x0e\x7f\x97\xa1\x01\xc6\x47\xc5\x22\xcd\x58\x68\x1a\xe2\x53\x85\x9c\xc1\xad\x4b\xe3\xfd\x14\x12\x7a\x6f\x95\xfa\x09\x39\xb7\x4c\x55\xd0\xe8\x2f\xdd\x40\x42\xb9\x52\x5f\xdc\x51\xff\xff\x1d\x3a\x7d\xb2\xaa\xc7\x08\x3d\xf9\x41\x8c\xfd\x56\x00\xb0\x97\xdb\x0b\x8a\x5f\xea\x26\x12\x9f\xd1\x75\x5c\xd1\xbe\x85\x11\xdc\x47\x5a\x84\xed\x4a\x2a\x4f\xb0\xbd\x63\xe2\x6c\x46\x6b\xd5\x2b\x00\x00\xff\xff\xe4\xb3\x59\x49\xd1\x00\x00\x00")

func imagesPythonAppPyBytes() ([]byte, error) {
	return bindataRead(
		_imagesPythonAppPy,
		"images/python/app.py",
	)
}

func imagesPythonAppPy() (*asset, error) {
	bytes, err := imagesPythonAppPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/python/app.py", size: 209, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesPythonFxPy = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x49\x4d\x53\x48\xab\xd0\xc8\xd2\xb4\xe2\x52\x50\x50\x50\x28\x4a\x2d\x29\x2d\xca\x53\xc8\xd2\x4b\x54\xd0\x56\xc8\xd2\x4b\xe2\x02\x04\x00\x00\xff\xff\xc8\x67\x2c\x81\x20\x00\x00\x00")

func imagesPythonFxPyBytes() ([]byte, error) {
	return bindataRead(
		_imagesPythonFxPy,
		"images/python/fx.py",
	)
}

func imagesPythonFxPy() (*asset, error) {
	bytes, err := imagesPythonFxPyBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/python/fx.py", size: 32, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesRubyDockerfile = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x0b\xf2\xf7\x55\x28\x2a\x4d\xaa\xb4\xca\x49\x2c\x49\x2d\x2e\xe1\xe2\x0a\x0a\xf5\x53\x48\x4f\xcd\x55\xc8\xcc\x2b\x2e\x49\xcc\xc9\x51\x28\xce\xcc\x4b\x2c\x29\x4a\xe4\xe2\x72\xf6\x0f\x88\x54\xd0\x53\xd0\xe3\x72\x8d\x08\xf0\x0f\x76\x55\x30\x36\x30\x30\xe0\x72\xf6\x75\x01\x6b\x57\x48\x2c\x28\xd0\x2b\x4a\x52\xd0\x2d\x00\x8b\x2b\xe8\xe6\x2b\x18\xe8\x81\x21\x17\x20\x00\x00\xff\xff\x74\xfa\x07\x0d\x63\x00\x00\x00")

func imagesRubyDockerfileBytes() ([]byte, error) {
	return bindataRead(
		_imagesRubyDockerfile,
		"images/ruby/Dockerfile",
	)
}

func imagesRubyDockerfile() (*asset, error) {
	bytes, err := imagesRubyDockerfileBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/ruby/Dockerfile", size: 99, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesRubyAppRb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x5c\xce\x41\xca\xc2\x30\x10\x05\xe0\xfd\x9c\xe2\xed\xb2\xf9\xc9\x5f\x70\x27\xf4\x02\x2e\x74\xe1\x01\x4a\x4a\xa6\x10\x29\x99\x38\x19\xb5\xbd\xbd\x44\xa8\x48\x97\xf3\xe6\x7d\xf0\x94\xef\x8f\xa4\x0c\x57\x53\x0e\xa6\xc1\xd1\x37\xb9\x55\xc9\x8e\xb6\x7b\x50\x9e\x83\xa5\x27\xc3\x4d\x8b\xd7\xd1\x11\x55\x36\x1c\x8b\xa8\xfd\xe1\xd0\x75\x1d\x51\x91\x6a\x70\xff\x0e\x51\x08\x00\x1a\xe5\x6a\x7e\x94\xb8\x7a\xe5\x57\xca\xf1\x37\x1f\x4a\x58\x67\x09\x11\x3d\x4e\xd7\xcb\xd9\x97\xa0\x95\xf7\x28\x6c\xc4\xd0\x63\x5a\xf6\xf6\xf3\x6c\xd5\xd6\xf0\x26\x43\x5b\x4d\x9c\x23\xbd\x03\x00\x00\xff\xff\xe5\x7b\xc2\xc9\xda\x00\x00\x00")

func imagesRubyAppRbBytes() ([]byte, error) {
	return bindataRead(
		_imagesRubyAppRb,
		"images/ruby/app.rb",
	)
}

func imagesRubyAppRb() (*asset, error) {
	bytes, err := imagesRubyAppRbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/ruby/app.rb", size: 218, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _imagesRubyFxRb = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x4a\x49\x4d\x53\x48\xab\xd0\xc8\xcc\x2b\x28\x2d\xd1\xe4\x52\x50\x50\x50\x00\x33\xa3\x95\x12\x95\x62\x15\xb4\x61\x9c\x24\xa5\x58\xae\xd4\xbc\x14\x2e\x40\x00\x00\x00\xff\xff\x36\x86\x62\xcf\x2e\x00\x00\x00")

func imagesRubyFxRbBytes() ([]byte, error) {
	return bindataRead(
		_imagesRubyFxRb,
		"images/ruby/fx.rb",
	)
}

func imagesRubyFxRb() (*asset, error) {
	bytes, err := imagesRubyFxRbBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "images/ruby/fx.rb", size: 46, mode: os.FileMode(420), modTime: time.Unix(1510920935, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"images/go/Dockerfile": imagesGoDockerfile,
	"images/go/app.go": imagesGoAppGo,
	"images/go/fx.go": imagesGoFxGo,
	"images/java/Dockerfile": imagesJavaDockerfile,
	"images/java/pom.xml": imagesJavaPomXml,
	"images/java/src/main/java/fx/Fx.java": imagesJavaSrcMainJavaFxFxJava,
	"images/java/src/main/java/fx/app.java": imagesJavaSrcMainJavaFxAppJava,
	"images/julia/Dockerfile": imagesJuliaDockerfile,
	"images/julia/REQUIRE": imagesJuliaRequire,
	"images/julia/app.jl": imagesJuliaAppJl,
	"images/julia/deps.jl": imagesJuliaDepsJl,
	"images/julia/fx.jl": imagesJuliaFxJl,
	"images/node/Dockerfile": imagesNodeDockerfile,
	"images/node/app.js": imagesNodeAppJs,
	"images/node/fx.js": imagesNodeFxJs,
	"images/php/Dockerfile": imagesPhpDockerfile,
	"images/php/fx.php": imagesPhpFxPhp,
	"images/php/index.php": imagesPhpIndexPhp,
	"images/python/Dockerfile": imagesPythonDockerfile,
	"images/python/app.py": imagesPythonAppPy,
	"images/python/fx.py": imagesPythonFxPy,
	"images/ruby/Dockerfile": imagesRubyDockerfile,
	"images/ruby/app.rb": imagesRubyAppRb,
	"images/ruby/fx.rb": imagesRubyFxRb,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"images": &bintree{nil, map[string]*bintree{
		"go": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{imagesGoDockerfile, map[string]*bintree{}},
			"app.go": &bintree{imagesGoAppGo, map[string]*bintree{}},
			"fx.go": &bintree{imagesGoFxGo, map[string]*bintree{}},
		}},
		"java": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{imagesJavaDockerfile, map[string]*bintree{}},
			"pom.xml": &bintree{imagesJavaPomXml, map[string]*bintree{}},
			"src": &bintree{nil, map[string]*bintree{
				"main": &bintree{nil, map[string]*bintree{
					"java": &bintree{nil, map[string]*bintree{
						"fx": &bintree{nil, map[string]*bintree{
							"Fx.java": &bintree{imagesJavaSrcMainJavaFxFxJava, map[string]*bintree{}},
							"app.java": &bintree{imagesJavaSrcMainJavaFxAppJava, map[string]*bintree{}},
						}},
					}},
				}},
			}},
		}},
		"julia": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{imagesJuliaDockerfile, map[string]*bintree{}},
			"REQUIRE": &bintree{imagesJuliaRequire, map[string]*bintree{}},
			"app.jl": &bintree{imagesJuliaAppJl, map[string]*bintree{}},
			"deps.jl": &bintree{imagesJuliaDepsJl, map[string]*bintree{}},
			"fx.jl": &bintree{imagesJuliaFxJl, map[string]*bintree{}},
		}},
		"node": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{imagesNodeDockerfile, map[string]*bintree{}},
			"app.js": &bintree{imagesNodeAppJs, map[string]*bintree{}},
			"fx.js": &bintree{imagesNodeFxJs, map[string]*bintree{}},
		}},
		"php": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{imagesPhpDockerfile, map[string]*bintree{}},
			"fx.php": &bintree{imagesPhpFxPhp, map[string]*bintree{}},
			"index.php": &bintree{imagesPhpIndexPhp, map[string]*bintree{}},
		}},
		"python": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{imagesPythonDockerfile, map[string]*bintree{}},
			"app.py": &bintree{imagesPythonAppPy, map[string]*bintree{}},
			"fx.py": &bintree{imagesPythonFxPy, map[string]*bintree{}},
		}},
		"ruby": &bintree{nil, map[string]*bintree{
			"Dockerfile": &bintree{imagesRubyDockerfile, map[string]*bintree{}},
			"app.rb": &bintree{imagesRubyAppRb, map[string]*bintree{}},
			"fx.rb": &bintree{imagesRubyFxRb, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

func main() {
	data, err := Asset("images/go/Dockerfile")
	if err != nil {
		panic(err)
	}
	fmt.Println(string(data));
}
